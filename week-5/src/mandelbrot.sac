#define XRES 6
#define YRES 4
#define EXPAND 64

#define DEPTH 1024

#ifndef TIER
/* You will need to change this as you implement the different tiers */
#define TIER 1
#endif /* TIER */

use Structures: all;
use SDLdisplay: all;
use StdIO : all;

use Fractal_tier1 : all;
use Benchmarking : all;
#if TIER >= 2
use Fractal_tier2 : all;
#if TIER >= 3
use Stencil_tier3 : all;
#endif /* TIER >= 3 */
#endif /* TIER >= 2 */

inline
color[.,.] stretchRgb( color[.,.] pic, int stretch)
{
  res = with {
          (. <= iv <= .): pic[ iv / stretch];
        } : genarray( shape(pic) * stretch, black());
  return( res);
}

/* Main ******************************************************************** */

int main()
{
  disp = initMultiDisplay( [2,2], EXPAND * [YRES,XRES] );
  Clock::sleep(1);
  
  cmin = [toc( -2.2, 1.0)];
  cmax = [toc( 0.8, -1.0)];


    expand = EXPAND;
    cur_shape = [YRES,XRES];

    do {
      plane = genComplexArray( cur_shape, cmin[[0]], cmax[[0]]);

      ts = escapeTime( plane, DEPTH);

      rgbs = intArrayToMonochrome( ts);

      drawArrayMulti( disp, stretchRgb( rgbs, expand), [0,0]);
      expand = expand / 2;
      cur_shape = 2 * cur_shape;
    } while ( expand >= 1);
    

  destroyDisplay( disp);

  return(0);
}