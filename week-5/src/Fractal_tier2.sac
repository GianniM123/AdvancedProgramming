//Gianni Monteban & Martijn Vogelaar

module Fractal_tier2;

use Structures: all;
use Numerical: all;
use StdIO: all;
export all;

/** <!--*******************************************************************-->
 *
 * @fn int, complex escapeTimeAndValue(complex z, int depth)
 *
 *   @brief iteratively computes c = c*c + z starting from c=z.
 *          terminates either when |c| > 2 or depth iterations
 *          have been performed.
 *          NB: Besides "norm" there exists "normSq" which computes |c|^2.
 *
 *   @return number of iterations until termination and final complex value
 *****************************************************************************/
int, complex escapeTimeAndValue(complex z, int depth)
{
  originalDepth = depth;
  c = z;
  while (abs(norm(c)) <= 2d && depth >= 0)
  {
    c = c*c+z;
    depth--;
  }
  return ((originalDepth - depth),c);
}

/** <!--*******************************************************************-->
 *
 * @fn int[*], complex[*] escapeTimeAndValue(complex[*] z, int depth)
 *
 *   @brief maps escapeTimeAndValue to an entire array of complex numbers
 *
 *****************************************************************************/
inline
int[.,.], complex[.,.] escapeTimeAndValue( complex[.,.] plane, int depth)
{
  l = genarray(shape(plane),0);
  compl = genarray(shape(plane),toc(0.0));
  for(i = 0; i < shape(plane)[[0]]; i++)
  {
    for(j = 0; j < shape(plane)[[1]]; j++)
    {
      a, b = escapeTimeAndValue(plane[[i,j]], depth);
      l[[i,j]] = a;
      compl[[i,j]] = b; 
    }

  }
  return (l,compl);
}


/** <!--*******************************************************************-->
 *
 * @fn double normalizedIterationCount(int n, complex zn)
 *
 *   @brief normalizes the iteration counts in "n" taking the distance of the 
 *          corresponding final complex numbers from the origin into account.
 *          For corresponding elements in "n" and "zn", we have:
 *             0.0                          iff |zn| <= 2
 *             (n+1) - log2( log2( |zn|))   otherwise
 *
 *   @return the normalized iteration counts
 *****************************************************************************/
inline
double[*] normalizedIterationCount(int[*] n, complex[*] zn)
{
  retVal = 0.0;
  if (!all(shape(n) == shape(zn)))
  {
    print("error, incorrect shape");
    retVal = 0.0;
  }
  if(dim(n) == 0)
  {
    if(abs(norm(zn)) <= 2d){
      retVal =  0.0;
    }
    else{
      retVal = tod(n+1) - log2( log2( abs(norm(zn))));
    }
  }
  else
  {
    retVal = genarray(shape(n),0.0);
    for(i = 0; i < shape(n)[0]; i++)
    {
      retVal[[i]] = normalizedIterationCount(n[[i]],zn[[i]]);
    }
  }
  
  return retVal;
  /**
   * fill in here...
   */
}


/** <!--*******************************************************************-->
 *
 * @fn color[.,.] doubleArrayToRGB( double[.,.] a)
 *
 *   @brief transforms an array of doubles into RGB values, by 
 *          FIRST scaling them into values between 0.0 and 360.0, and
 *          THEN  using them as HSB angles to choose a color.
 *          NB: Color8 provides a function Hsb2Rgb for the actual
 *              conversion.
 *  
 *   @return RGB values
 * 
 * doubleArrayToRGBmaps the normalized iteration counts, which are double values, to anRGB colour-triple. 
 * To derive an RGB value, first scale all values such that they are in theinterval 0â‰¤x<360. 
 * This value can then be used as the hue in the HSB model.Hint: 
 * The moduleColor8defines a functionHsb2Rgbthat converts a HSB color descriptioninto its corresponding RGB representation
 * 
 * 
 *****************************************************************************/
inline
Color8::color[.,.] doubleArrayToRGB( double[.,.] a)
{
  retVal = genarray(shape(a),[0,0,0]);
  for(i = 0; i < shape(a)[[0]]; i++)
  {
    for(j = 0; j < shape(a)[[1]]; j++)
    {
      x = toi(abs(a[[i,j]])* 16d) % 360;
      retVal[[i,j]] = (int[3])Color8::Hsb2Rgb(x,60,80);
    }

  }
  retVal = {[i,j] -> (Color8::color)retVal[[i,j]]};
  return retVal;
  /**
   * fill in here...
   */
}
